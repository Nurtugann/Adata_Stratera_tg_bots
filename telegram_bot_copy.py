# -*- coding: utf-8 -*-
import telebot
import threading
import time
import requests
import json
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

import os

API_KEY = os.getenv("telgram_copy_bot_api")
token_url = os.getenv("token_url")


bot = telebot.TeleBot(API_KEY)

allowed_users = {
    885253145: "–ù—É—Ä—Ç—É–≥–∞–Ω"
}

user_state = {}
modules = ['basic', 'status', 'riskfactor', 'trustworthy-extended']

bin_url_1 = "https://api.adata.kz/api/company/"
bin_url_2 = "/ZVloUOB6nHzxcHfs4jPJEW12V2YxEgY?iinBin="

def get_company_info(bin, module):
    try:
        url = f"{bin_url_1}{module}{bin_url_2}{bin}"
        r = requests.get(url)
        if r.status_code != 200:
            return {}

        token_id = r.json()['token']
        url_2 = f"{token_url}{token_id}"
        while True:
            r2 = requests.get(url_2)
            if r2.status_code != 200:
                return {}
            if r2.json()['message'] == 'ready':
                return r2.json()
            elif r2.json()['message'] != 'wait':
                return {}
            time.sleep(1)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö:", e)
        return {}

def send_company_info(bot, chat_id, basic):
    bot.send_message(chat_id, '–ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: ' + basic.get('name_ru', '‚Äî'))
    bot.send_message(chat_id, '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ' + basic.get('date_registration', '‚Äî'))
    bot.send_message(chat_id, f"–û–ö–≠–î ({basic.get('oked_id', '‚Äî')}): {basic.get('oked', '‚Äî')}")
    bot.send_message(chat_id, '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å: ' + basic.get('legal_address', '‚Äî'))
    bot.send_message(chat_id, '–§–ò–û —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è: ' + basic.get('fullname_director', '‚Äî'))

@bot.message_handler(commands=['start'])
def start(message):
    if message.chat.id not in allowed_users:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    user_name = allowed_users[message.chat.id]
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é"))
    markup.add(KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å"))

    bot.send_message(message.chat.id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    user_state[message.chat.id] = "waiting_for_action"

@bot.message_handler(func=lambda message: message.text in ["üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"])
def handle_menu(message):
    if message.chat.id not in allowed_users:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    if message.text == "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é":
        bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏—Ç–µ –ë–ò–ù –∫–æ–º–ø–∞–Ω–∏–∏.")
        user_state[message.chat.id] = "waiting_for_id"
    else:
        bot.send_message(message.chat.id, "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –ë–ò–ù. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ë–ò–ù.")

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == "waiting_for_id")
def handle_company_id(message):
    if message.chat.id not in allowed_users:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    company_id = message.text.strip()
    bot.send_message(message.chat.id, "‚è≥ –ò–¥—ë—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞...")

    try:
        basic_info = get_company_info(company_id, modules[0])
        if not basic_info:
            raise ValueError("–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        basic = basic_info['data']
        status = get_company_info(company_id, modules[1])['data']
        risk = get_company_info(company_id, modules[2])['data']
        trust = get_company_info(company_id, modules[3])['data']

        info = []

        if not status['company_status']:
            info.append("‚ùó –í —Å–ø–∏—Å–∫–µ ¬´–ë–µ–∑–¥–µ–π—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ¬ª")
        if status['bankcrupt']:
            info.append("‚ùó –í —Å–ø–∏—Å–∫–µ ¬´–ë–∞–Ω–∫—Ä–æ—Ç¬ª")
        if risk['company']['seized_bank_account']:
            info.append("‚ùó –ê—Ä–µ—Å—Ç –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Å—á–µ—Ç–∞")
        if risk['company']['seized_property']:
            info.append("‚ùó –ê—Ä–µ—Å—Ç –Ω–∞ –∏–º—É—â–µ—Å—Ç–≤–æ")
        if risk['company']['ban_registration_actions_legal_ent']:
            info.append("‚ùó –ó–∞–ø—Ä–µ—Ç –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Æ–õ")
        if risk['company']['ban_registration_actions_physical_ent']:
            info.append("‚ùó –ó–∞–ø—Ä–µ—Ç –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –§–õ")
        if risk['company']['ban_notarius_actions']:
            info.append("‚ùó –ó–∞–ø—Ä–µ—Ç –Ω–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π")
        if risk['head']['enforcement_debt']:
            info.append("‚ùó –î–æ–ª–∂–Ω–∏–∫ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞–º")
        if risk['head']['debtor_for_executive_documents']:
            info.append("‚ùó –í —Å–ø–∏—Å–∫–µ –¥–æ–ª–∂–Ω–∏–∫–æ–≤ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º")
        if trust['tax_arrears_150']:
            info.append("‚ùó –ù–∞–ª–æ–≥–æ–≤–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –±–æ–ª–µ–µ 150 –ú–†–ü")
        if trust['restriction_on_leaving']:
            info.append("‚ùó –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –≤—ã–µ–∑–¥ –∏–∑ –†–ö")
        if trust['transport_arrest']:
            info.append("‚ùó –ê—Ä–µ—Å—Ç –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")

        send_company_info(bot, message.chat.id, basic)

        if not info:
            bot.send_message(message.chat.id, "–ü—Ä–æ–±–ª–µ–º –Ω–µ—Ç ‚úÖ")
        else:
            for i in info:
                bot.send_message(message.chat.id, i)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥—É—é –∫–æ–º–ø–∞–Ω–∏—é", callback_data="check_another"))
        bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥—É—é –∫–æ–º–ø–∞–Ω–∏—é?", reply_markup=markup)

        user_state[message.chat.id] = "waiting_for_action"

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞:", e)
        bot.send_message(message.chat.id, "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ë–ò–ù –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π.")

@bot.callback_query_handler(func=lambda call: call.data == "check_another")
def check_another(call):
    if call.message.chat.id not in allowed_users:
        bot.send_message(call.message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    bot.send_message(call.message.chat.id, "–ü—Ä–∏—à–ª–∏—Ç–µ –ë–ò–ù –∫–æ–º–ø–∞–Ω–∏–∏.")
    user_state[call.message.chat.id] = "waiting_for_id"

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def polling():
    bot.polling(non_stop=True, interval=0)

thread = threading.Thread(target=polling)
thread.start()
