# -*- coding: utf-8 -*-
import os
import time
import requests
import json
from flask import Flask, request
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

API_KEY = os.getenv("telgram_copy_bot_api")
token_url = os.getenv("token_url")
bin_url_2 = os.getenv("bin_url_2")
bin_url_1 = "https://api.adata.kz/api/company/"

bot = telebot.TeleBot(API_KEY)
app = Flask(__name__)

allowed_users = {
    885253145: "–ù—É—Ä—Ç—É–≥–∞–Ω"
}

user_state = {}
modules = ['basic', 'status', 'riskfactor', 'trustworthy-extended']

def get_company_info(bin, module):
    try:
        url = f"{bin_url_1}{module}{bin_url_2}{bin}"
        r = requests.get(url)
        if r.status_code != 200:
            return {}

        token_id = r.json()['token']
        url_2 = f"{token_url}{token_id}"
        while True:
            r2 = requests.get(url_2)
            if r2.status_code != 200:
                return {}
            if r2.json()['message'] == 'ready':
                return r2.json()
            elif r2.json()['message'] != 'wait':
                return {}
            time.sleep(1)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö:", e)
        return {}

def format_company_info(basic, status, risk, trust):
    lines = []
    lines.append(f"üè¢ *{basic.get('name_ru', '‚Äî')}*")
    lines.append(f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {basic.get('date_registration', '‚Äî')}")
    lines.append(f"üè∑ –û–ö–≠–î ({basic.get('oked_id', '‚Äî')}): {basic.get('oked', '‚Äî')}")
    lines.append(f"üìç –Æ—Ä. –∞–¥—Ä–µ—Å: {basic.get('legal_address', '‚Äî')}")
    lines.append(f"üë§ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: {basic.get('fullname_director', '‚Äî')}")

    warnings = []

    if not status['company_status']:
        warnings.append("‚ùó –í —Å–ø–∏—Å–∫–µ ¬´–ë–µ–∑–¥–µ–π—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ¬ª")
    if status['bankcrupt']:
        warnings.append("‚ùó –í —Å–ø–∏—Å–∫–µ ¬´–ë–∞–Ω–∫—Ä–æ—Ç¬ª")
    if risk['company']['seized_bank_account']:
        warnings.append("‚ùó –ê—Ä–µ—Å—Ç –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Å—á–µ—Ç–∞")
    if risk['company']['seized_property']:
        warnings.append("‚ùó –ê—Ä–µ—Å—Ç –Ω–∞ –∏–º—É—â–µ—Å—Ç–≤–æ")
    if risk['company']['ban_registration_actions_legal_ent']:
        warnings.append("‚ùó –ó–∞–ø—Ä–µ—Ç –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Æ–õ")
    if risk['company']['ban_registration_actions_physical_ent']:
        warnings.append("‚ùó –ó–∞–ø—Ä–µ—Ç –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –§–õ")
    if risk['company']['ban_notarius_actions']:
        warnings.append("‚ùó –ó–∞–ø—Ä–µ—Ç –Ω–∞ –Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
    if risk['head']['enforcement_debt']:
        warnings.append("‚ùó –î–æ–ª–≥–∏ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞–º")
    if risk['head']['debtor_for_executive_documents']:
        warnings.append("‚ùó –í —Å–ø–∏—Å–∫–µ –¥–æ–ª–∂–Ω–∏–∫–æ–≤ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º")
    if trust['tax_arrears_150']:
        warnings.append("‚ùó –ù–∞–ª–æ–≥–æ–≤–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å >150 –ú–†–ü")
    if trust['restriction_on_leaving']:
        warnings.append("‚ùó –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –≤—ã–µ–∑–¥ –∏–∑ –†–ö")
    if trust['transport_arrest']:
        warnings.append("‚ùó –ê—Ä–µ—Å—Ç –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")

    if warnings:
        lines.append("\n‚ö†Ô∏è *–†–∏—Å–∫–∏:*")
        lines += warnings
    else:
        lines.append("\n‚úÖ *–ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ*")

    return "\n".join(lines)

@bot.message_handler(commands=['start'])
def start(message):
    if message.chat.id not in allowed_users:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    user_name = allowed_users[message.chat.id]
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("\U0001F50D –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é"))
    markup.add(KeyboardButton("\u2139\ufe0f –ü–æ–º–æ—â—å"))

    bot.send_message(message.chat.id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    user_state[message.chat.id] = "waiting_for_action"

@bot.message_handler(func=lambda message: message.text in ["\U0001F50D –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é", "\u2139\ufe0f –ü–æ–º–æ—â—å"])
def handle_menu(message):
    if message.chat.id not in allowed_users:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    if message.text == "\U0001F50D –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é":
        bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏—Ç–µ –ë–ò–ù –∫–æ–º–ø–∞–Ω–∏–∏.")
        user_state[message.chat.id] = "waiting_for_id"
    else:
        bot.send_message(message.chat.id, "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –ë–ò–ù. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ë–ò–ù.")

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == "waiting_for_id")
def handle_company_id(message):
    if message.chat.id not in allowed_users:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    company_id = message.text.strip()
    if not company_id.isdigit() or len(company_id) != 12:
        bot.send_message(message.chat.id, "‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π 12-–∑–Ω–∞—á–Ω—ã–π –ë–ò–ù.")
        return

    bot.send_message(message.chat.id, "\u23F3 –ò–¥—ë—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞...")

    try:
        basic_info = get_company_info(company_id, modules[0])
        if not basic_info:
            raise ValueError("–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        basic = basic_info['data']
        status = get_company_info(company_id, modules[1])['data']
        risk = get_company_info(company_id, modules[2])['data']
        trust = get_company_info(company_id, modules[3])['data']

        message_text = format_company_info(basic, status, risk, trust)
        bot.send_message(message.chat.id, message_text, parse_mode='Markdown')

        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("\U0001F501 –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥—É—é –∫–æ–º–ø–∞–Ω–∏—é", callback_data="check_another"))
        bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥—É—é –∫–æ–º–ø–∞–Ω–∏—é?", reply_markup=markup)

        user_state[message.chat.id] = "waiting_for_action"

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞:", e)
        bot.send_message(message.chat.id, "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ë–ò–ù –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π.")

@bot.callback_query_handler(func=lambda call: call.data == "check_another")
def check_another(call):
    if call.message.chat.id not in allowed_users:
        bot.send_message(call.message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    bot.send_message(call.message.chat.id, "–ü—Ä–∏—à–ª–∏—Ç–µ –ë–ò–ù –∫–æ–º–ø–∞–Ω–∏–∏.")
    user_state[call.message.chat.id] = "waiting_for_id"

@app.route(f"/{API_KEY}", methods=['POST'])
def webhook():
    json_str = request.get_data().decode('UTF-8')
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return 'ok', 200

@app.route('/')
def index():
    return '–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç'

@app.route('/set_webhook')
def set_webhook():
    webhook_url = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/{API_KEY}"
    success = bot.set_webhook(webhook_url)
    return f"Webhook {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if success else '–Ω–µ —É–¥–∞–ª–æ—Å—å'}: {webhook_url}"

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=10001, debug=True)
